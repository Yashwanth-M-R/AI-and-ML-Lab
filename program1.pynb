def algo(start, stop):
    open_set = set(start)
    closed = set()
    g = {}
    parents = {}
    g[start] = 0
    parents[start] = start
    
    while len(open_set) > 0:
        n = None
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n=v
        
        if n== stop or Graph_nodes[n] == None:
            pass
        else:
            for(m, weight) in get_neighbors(n):
                if m not in open_set and m not in closed:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] +weight
    
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] =n
                        
                    if m in closed:
                        closed.remove(m)
                        open_set.add(m)

        if n==None:
            print("Path does not exist")
            return None
        
        if n== stop:
            path = []
            
            while parents[n] !=n:
                path.append(n)
                n = parents[n]
            
            path.append(start)
            path.reverse()
            print("Path founs: {}".format(path))
            return path
        
        open_set.remove(n)
        closed.add(n)
    
    print("Path does not exist")
    return None

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    
    else:
        return None
    
def heuristic(n):
    H_dist = {
        "S" : 10,
        "A" : 5,
        "B" : 6,
        "C" : 4,
        "D" : 15,
        "E" : 0,
        "X" : 5,
        "Y" : 8
    }
    return H_dist[n]

Graph_nodes = {
    "S" : [("A",1), ("B",2)],
    "A" : [("Y",7), ("X",4)],
    "Y" : [("E",3)],
    "X" : [("E",2)],
    "B" : [("C",7), ("D",1)],
    "C" : [("E",5)],
    "D" : [("E",12)]
    
}
algo('S','E')
        
            
    
